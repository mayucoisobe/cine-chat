import Head from 'next/head';
import { useEffect, useState } from 'react';
import { Button, Input } from '@chakra-ui/react';
import { useAuthContext } from '@/providers/AuthProvider';
import { AuthGuard } from '@/feature/auth/AuthGuard';
import { collection, addDoc, serverTimestamp, onSnapshot, query, orderBy } from 'firebase/firestore';
import { auth, db } from '../firebase';
import { formatDistance } from 'date-fns';
import { ja } from 'date-fns/locale';

export default function Tweet(): JSX.Element {
  const { user } = useAuthContext();
  const [twtext, setTwtext] = useState<string>('');
  const twTextWriting = (e: React.ChangeEvent<HTMLInputElement>) => {
    setTwtext(e.target.value);
  };

  // チャットをfirebaseに追加
  const sendPost = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {
    e.preventDefault();
    if (auth.currentUser) {
      await addDoc(collection(db, 'tweets'), {
        createdAt: serverTimestamp(),
        twText: twtext,
        user: {
          name: auth.currentUser.displayName,
          id: auth.currentUser.uid,
          photoURL: auth.currentUser.photoURL,
        },
      });
      setTwtext('');
    }
  };

  type User = {
    name: string;
    id: string;
    photoURL: string;
  };

  type Tweet = {
    createdAt: string;
    twText: string;
    user: User;
  };

  // チャットデータをfirebaseから取得
  const [getTweet, setGetTweet] = useState<Tweet[]>([]);

  useEffect(() => {
    const q = query(collection(db, 'tweets'), orderBy('createdAt', 'asc'));
    const unsub = onSnapshot(q, (snapshot) => {
      const tweets = [];
      snapshot.forEach((doc) => {
        tweets.push({ id: doc.id, ...doc.data() });
      });
      setGetTweet(tweets);
    });

    return () => {
      unsub();
    };
  }, [user]);

  // timestamp型のデータを変換;
  const time = (date: Timestamp | null) => {
    if (date) {
      let timestamp = formatDistance(new Date(), date.toDate(), {
        locale: ja,
      });
      if (timestamp.indexOf('未満') !== -1) {
        return (timestamp = 'たった今');
      } else {
        return (timestamp = timestamp + '前');
      }
    }
    return '';
  };

  return (
    <div>
      <Head>
        <title>Tweet24</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AuthGuard>
        <div className="home">
          <h1>Tweet24</h1>
          <div>
            <div>
              {user &&
                getTweet.map((tweet, index) => {
                  return (
                    <div key={index}>
                      <div>
                        <p>{/* <img src={tweet.user.photoURL} alt="" /> */}</p>
                        <p>@{tweet.user.name}</p>
                      </div>
                      <p>{tweet.twText}</p>
                      <span>{time(tweet.createdAt)}</span>
                    </div>
                  );
                })}
            </div>
          </div>
          <form>
            <p>
              <Input
                onChange={twTextWriting}
                type="text"
                value={twtext}
                placeholder="Lets Tweet!"
                required
                minLength={1}
              />
            </p>
            <p>
              <Button onClick={sendPost} type="submit">
                Tweetする
              </Button>
            </p>
          </form>
        </div>
      </AuthGuard>
    </div>
  );
}
